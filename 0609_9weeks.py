# 서식
print("안녕하세요 %s 입니다" % "김민욱")
print("너비: %d, 높이: %d, 넓이:%d" %(20, 30, 20 * 30))

# 리스트
# 변경 가능한 자료구조
# 크기를 동적으로 조절 가능
# 인덱싱 이용해 요소를 참조 가능
# 문자열과 마찬가지로 연결하기, 슬라이싱, 반복하기, 멤버 검사, 길이 정보 연산 지원

e = []
l1 = [1,2,3,"abc"]
l2 = [1,2,3, [1,2]]
print(len(e))
print(l1)
print(l2)
print(len(l1))
print(len(l2))

# 인덱싱 => 특정 요소에 접근해서 값을 읽거나 변경하는 방법
l = [1, 2, 3, "abc"] #리스트 생성
print(l[0], l[1], l[2], l[3]) # 순서대로 출력
print(l[-1], l[-2], l[-3], l[-4]) # 거꾸로 출력

# 슬라이싱 => [시작인덱스:끝인덱스] 를 사용해서 요소들에 접근
a = [1, 2, 3, "abc", 4, 5]
print(a[2:4])

# 확장 슬라이싱 => [시작인덱스:끝인덱스:스텝] 스텝만큼 건너뛰면서 리스트 참조
b = [1, 2, 3, "abc", 4, 5]
print(b[2:5:2]) # b의 2~4까지하고 2씩 건너뛰기

# 연결하기
c = [1, 2, 3]
d = ["abc", 4, 5]
print(c+d)

# del(위치에 있는 값 삭제), remove(x) 리스트에서 첫번째로 나오는 x 제거, count(x) x의 개수 세기
# in => 요소의 존재 여부 확인
aaa = [4, 8, 7, 2, 1]
print(8 in aaa)

# 인덱스 확인하기
print(aaa.index(1))

# append() 리스트 요소 추가
# insert(x,y) x index 위치에 y삽입 리스트 요소 삽입

#리스트 요소 정렬 sort()
bbb = [1, 5, 2, 3]
bbb.sort()
print(bbb)

# 리스트 요소 뒤집기 reverse()
bbb.reverse()
print(bbb)

# for 반복문을 이용해 리스트의 각 요소에 접근 가능
a1 = [4, 8, 7, 2, 1]
for n in a1:
    print(n)


print("-------------------------")
# 튜플 => 바꿀 수 없는 리스트 (변경할 수 없는 것이 리스트와 큰 차이)
# 리스트와 마찬가지로 연결하기, 슬라이싱 반복하기 멤버 검사, 길이 정보 등과 같은 다양한 연산 지원
t1 = (2, 3)
print(t1)

t2 = 2, 3
print(t2) #튜플로 만들어짐

t3 = (2)
print(t3)

t4 = (2,)
print(t4)
print(len(t4))

# 튜플도 똑같이 인덱싱, 슬라이싱, 확장 슬라이싱, 연결, 반복 가능
# 하지만 요소 변경 불가능
t = (1, 2, [1,2])
print(t)

# t[0] = 3
# print(t) => 오류
# del(t[0]) => 오류

l1 = t[2] # [1,2]
print(l1)
l1[0] = 3
print(l1)
print(t) # 구조는 변경 불

t[2][0] = 4
print(t)

# tuple() 함수와 list() 함수를 이용해 튜플 => 리스트, 리스트 => 튜플 로 바꾸기 가능